#include <iostream>
#include <cassert>

/**
 * @brief A dynamic singly linked list class using templates.
 * 
 * This class supports operations like append, insert, delete,
 * search, update, and display.
 * 
 * @tparam T Type of the data stored in the list.
 */
template <typename T>
class DynamicLinkedList {
public:
    /**
     * @brief Constructor to initialize an empty list.
     */
    DynamicLinkedList() : head(nullptr) {}

    /**
     * @brief Destructor to delete all nodes in the list.
     */
    ~DynamicLinkedList() {
        while (head) {
            Node* to_delete = head;
            head = head->next;
            delete to_delete;
        }
    }

    /**
     * @brief Adds a new value to the end of the list.
     * 
     * @param value The value to be added.
     */
    void append(T value) {
        Node* node = new Node{value, nullptr};
        if (!head) {
            head = node;
            return;
        }
        Node* current = head;
        while (current->next) current = current->next;
        current->next = node;
    }

    /**
     * @brief Inserts a value at a specific position in the list.
     * 
     * @param position The index to insert at.
     * @param value The value to insert.
     * @throws std::out_of_range if the position is invalid.
     */
    void insert_at(int position, T value) {
        Node* node = new Node{value, nullptr};
        if (position == 0) {
            node->next = head;
            head = node;
            return;
        }
        Node* current = head;
        for (int i = 0; i < position - 1 && current; ++i) current = current->next;
        if (!current) throw std::out_of_range("Invalid position");
        node->next = current->next;
        current->next = node;
    }

    /**
     * @brief Prints all elements in the list.
     */
    void display() const {
        Node* current = head;
        while (current) {
            std::cout << current->data << " -> ";
            current = current->next;
        }
        std::cout << "NULL\n";
    }

    /**
     * @brief Gets the value at a specific index.
     * 
     * @param index The index to access.
     * @return T The value at that index.
     * @throws std::out_of_range if the index is invalid.
     */
    T get_value(int index) const {
        Node* current = head;
        for (int i = 0; i < index && current; ++i) current = current->next;
        if (!current) throw std::out_of_range("Index not found");
        return current->data;
    }

    /**
     * @brief Checks if the list contains a given value.
     * 
     * @param value The value to look for.
     * @return true If found.
     * @return false If not found.
     */
    bool contains(T value) const {
        Node* current = head;
        while (current) {
            if (current->data == value) return true;
            current = current->next;
        }
        return false;
    }

    /**
     * @brief Replaces the first matching value with a new value.
     * 
     * @param old_val The value to replace.
     * @param new_val The new value to set.
     * @return true If replaced.
     * @return false If value not found.
     */
    bool replace_value(T old_val, T new_val) {
        Node* current = head;
        while (current) {
            if (current->data == old_val) {
                current->data = new_val;
                return true;
            }
            current = current->next;
        }
        return false;
    }

    /**
     * @brief Sets a new value at a given index.
     * 
     * @param index The index to update.
     * @param value The new value to set.
     * @return true If index is valid.
     * @return false If index is invalid.
     */
    bool set_at_index(int index, T value) {
        Node* current = head;
        for (int i = 0; i < index && current; ++i) current = current->next;
        if (!current) return false;
        current->data = value;
        return true;
    }

    /**
     * @brief Removes the first node that has the given value.
     * 
     * @param value The value to remove.
     * @return true If removed successfully.
     * @return false If value not found.
     */
    bool remove_by_value(T value) {
        if (!head) return false;
        if (head->data == value) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return true;
        }
        Node* current = head;
        while (current->next && current->next->data != value) current = current->next;
        if (!current->next) return false;
        Node* temp = current->next;
        current->next = current->next->next;
        delete temp;
        return true;
    }

    /**
     * @brief Removes the node at a specific index.
     * 
     * @param index The index to remove.
     * @return true If removed.
     * @return false If index is invalid.
     */
    bool remove_at(int index) {
        if (!head) return false;
        if (index == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return true;
        }
        Node* current = head;
        for (int i = 0; i < index - 1 && current->next; ++i) current = current->next;
        if (!current->next) return false;
        Node* temp = current->next;
        current->next = current->next->next;
        delete temp;
        return true;
    }

private:
    /**
     * @brief Internal node structure for the linked list.
     */
    struct Node {
        T data;        ///< Data stored in the node.
        Node* next;    ///< Pointer to the next node.
    };
    Node* head;        ///< Pointer to the first node in the list.
};

// ======================
// Simple Test Cases
// ======================

/**
 * @brief Entry point to test the linked list functions.
 */
int main() {
    DynamicLinkedList<int> list;

    list.append(1);
    list.append(3);
    list.append(5);
    list.display(); // 1 -> 3 -> 5 -> NULL

    list.insert_at(1, 2);
    list.display(); // 1 -> 2 -> 3 -> 5 -> NULL

    assert(list.get_value(0) == 1);
    assert(list.get_value(2) == 3);

    assert(list.contains(5));

    assert(list.replace_value(3, 8));
    list.display(); // 1 -> 2 -> 8 -> 5 -> NULL

    assert(list.set_at_index(3, 9));
    list.display(); // 1 -> 2 -> 8 -> 9 -> NULL

    assert(list.remove_by_value(2));
    list.display(); // 1 -> 8 -> 9 -> NULL

    assert(list.remove_at(1));
    list.display(); // 1 -> 9 -> NULL

    std::cout << "\nAll operations passed successfully!\n";
    return 0;
}
